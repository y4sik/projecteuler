package starship.task12;

public class TriangularNumber {
    /**
     * Finds the value of the first triangle number which has more than n-th divisors.
     * <p>
     * The sequence of triangle numbers is generated by adding the natural numbers.
     * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
     * </p>
     *
     * @param countDividers the count of dividers
     * @return the value of first triangle number
     */
    public static int findFirstTriangularNumberDivisibleByDividersSequence(int countDividers) {
        int triangleNumber = 0;
        for (int naturalNumber = 1; ; naturalNumber++) {
            triangleNumber += naturalNumber;
            if (findAllNumberDividers(triangleNumber) > countDividers) {
                return triangleNumber;
            }
        }
    }

    /**
     * Finds the count dividers of a number.
     *
     * @param number the number for which dividers will be find
     * @return count dividers
     */
    private static int findAllNumberDividers(int number) {
        int countDividers = 0;
        int end = (int) Math.ceil(Math.sqrt(number));
        for (int divider = 1; divider < end; divider++) {
            if (number % divider == 0) {
                countDividers += 2;
            }
        }
        return countDividers;
    }
}
